plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    //rest-docs
    id "org.asciidoctor.jvm.convert" version '3.3.2'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacoco {
    toolVersion = "0.8.12"
}

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // bcrypt
    implementation 'org.springframework.security:spring-security-crypto'

    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // atomikos
    implementation 'com.atomikos:transactions-spring-boot3-starter:6.0.0'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //rest-docs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    //queryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor {
    dependsOn test // test 작업 이후에 작동하도록 하는 설정
    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
    inputs.dir snippetsDir // snippetsDir 를 입력으로 구성

    // source가 없으면 .adoc파일을 전부 html로 만들어버림
    // source 지정시 특정 adoc만 HTML로 만든다.
    sources {
        include("**/index.adoc", "**/common/*.adoc")
    }

    // 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
    // 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
    baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

jacocoTestReport {
    dependsOn test

    reports {
        html.required = true
        html.destination file("$buildDir/jacoco/report.html")
    }

    // QueryDSL QDomain Exclude
    def QDomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        QDomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            "**/*Config*",
<<<<<<< HEAD
<<<<<<< HEAD
                            "**/Request/**",
<<<<<<< HEAD
                            "**/Response/**"
=======
                            "**/*Dto*"
>>>>>>> 6b48677 ([#3] feat: TestCoverage 측정을 위한 JaCoCo)
=======
                            "**/Request/**",
                            "**/Response/**"
>>>>>>> e29c4b8 ([#3] fix: Testing Exclude setting DTO -> Request,Reseponse)
=======
                            "**/Response/**",
                            "**/InvoiceService.class"
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> b4d6ecc ([#17] feat: auth 인증 관련 내용 controller에 적용)
                    ])
=======
                    ] + QDomains)
>>>>>>> 72c26f5 ([#35] feat: QueryDSL 적용)
=======
                    ] + QDomains)
>>>>>>> 3735ac9 ([#35] feat: QueryDSL 적용)
                })
        )
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {

    // QueryDSL QDomain Exclude
    def QDomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        QDomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
<<<<<<< HEAD
<<<<<<< HEAD
                minimum = 0.6
=======
                minimun = 0.6
>>>>>>> 6b48677 ([#3] feat: TestCoverage 측정을 위한 JaCoCo)
=======
                minimum = 0.6
>>>>>>> 0bb660a ([#3] fix: fix mistyping)
            }

            excludes = [
                    "**.*Application*",
                    "**.*Config*",
<<<<<<< HEAD
<<<<<<< HEAD
                    "**.Request.*",
<<<<<<< HEAD
                    "**.Response.*"
=======
                    "**.*Dto*"
>>>>>>> 6b48677 ([#3] feat: TestCoverage 측정을 위한 JaCoCo)
=======
                    "**.Request.*",
                    "**.Response.*"
>>>>>>> e29c4b8 ([#3] fix: Testing Exclude setting DTO -> Request,Reseponse)
=======
                    "**.Response.*",
                    "**.ExceptionAdvice",
<<<<<<< HEAD
                    "**.AuthorizationFilter"
>>>>>>> 0525331 ([#24] chore: jacoco 적용 예외 추가)
=======
                    "**.AuthorizationFilter",
                    "**.InvoiceService"
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> b4d6ecc ([#17] feat: auth 인증 관련 내용 controller에 적용)
            ]
=======
            ] + QDomains
>>>>>>> 72c26f5 ([#35] feat: QueryDSL 적용)
=======
            ] + QDomains
>>>>>>> 3735ac9 ([#35] feat: QueryDSL 적용)
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
    finalizedBy jacocoTestReport
}
